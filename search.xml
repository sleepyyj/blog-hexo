<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[JS实现全屏的一些坑]]></title>
      <url>/2017/08/29/JS%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前两天做了一个pdf全屏播放的功能，以为看看API就能完成的，没想到因为一个keydown的问题浪费了大半天。</p>
<h3 id="先看下API"><a href="#先看下API" class="headerlink" title="先看下API"></a>先看下API</h3><p><code>Document.fullscreen</code>：检测当前页面是否全屏<br><code>Document.fullscreenEnabled</code>：当前页面是否允许全屏<br><code>Document.fullscreenElement</code>：输出当前的全屏的元素<br><code>Document.onfullscreenchange</code>：在exitFullscreen和requestFullscreen的时候会触发<br><code>Document.onfullscreenerror</code>：全屏事件出现错误时进行一些操作<br><code>Document.exitFullscreen()</code>：手动退出全屏<br><code>Element.requestFullscreen()</code>：手动进入全屏</p>
<p>使用的时候需要加上浏览器前缀</p>
<h3 id="requestFullscreen"><a href="#requestFullscreen" class="headerlink" title="requestFullscreen()"></a>requestFullscreen()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(element.requestFullscreen) &#123;</div><div class="line">    element.requestFullscreen();</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(element.mozRequestFullScreen) &#123;</div><div class="line">    element.mozRequestFullScreen();</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(element.msRequestFullscreen)&#123;</div><div class="line">    element.msRequestFullscreen();</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(element.webkitRequestFullscreen) &#123;</div><div class="line">    element.webkitRequestFullScreen();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意；全屏窗口不可滚动查看内容，全屏元素需加width: 100%;height: 100%;overflow: auto; 控制 ，以达到各浏览器显示效果一致（注：Gecko 会为元素自动添加 CSS 使其伸展以便铺满屏幕： “width: 100%; height: 100%”。 WebKit 则不会这么做；它会让全屏的元素以原始尺寸居中到屏幕中央，其余部分变为黑色。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-pseudo">:-webkit-full-screen</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#11ee11</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所有全屏化的祖先元素样式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-pseudo">:fullscreen-ancestor</span>&#123;</div><div class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>进入全屏标准写法requestFullscreen中的screen单词首字母是小写s，ms只需加上各自的浏览器前缀即可，但firefox和chrome除了加前缀screen单词首个字母必须大写：mozRequestFullScreen() webkitRequestFullScreen()</p>
<h3 id="exitFullscreen"><a href="#exitFullscreen" class="headerlink" title="exitFullscreen()"></a>exitFullscreen()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.exitFullscreen) &#123;</div><div class="line">    <span class="built_in">document</span>.exitFullscreen();</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.msExitFullscreen) &#123;</div><div class="line">    <span class="built_in">document</span>.msExitFullscreen();</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.mozCancelFullScreen) &#123;</div><div class="line">    <span class="built_in">document</span>.mozCancelFullScreen();</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.webkitExitFullscreen) &#123;</div><div class="line">    <span class="built_in">document</span>.webkitExitFullscreen();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用户手动按下ESC键或F11键，也可以退出全屏键。此外，加载新的页面，或者切换tab，或者从浏览器转向其他应用（按下Alt-Tab），也会导致退出全屏状态。<br>最坑的就是在Chrome下，按esc不会退出全屏，而且给esc加keydown事件手动去触发exitFullscreen也不行。最后把事件绑在了x和F11上，另一种解决方法就是在全屏界面上悬浮一个退出全屏的按钮，去调用exitFullscreen，这样好像比较舒服一点。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ow</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(p)&#123;</div><div class="line">        <span class="keyword">super</span>(p)</div><div class="line">        <span class="keyword">this</span>._name = <span class="keyword">this</span>.props.__name.replace(<span class="string">".aliyuncs.com"</span>,<span class="string">"-internal.aliyuncs.com"</span>)</div><div class="line">    &#125;</div><div class="line">    exitFullScreen=<span class="function"><span class="params">()</span>=&gt;</span> &#123;</div><div class="line">        <span class="built_in">document</span>.webkitCancelFullScreen()</div><div class="line">    &#125;</div><div class="line">    load=<span class="function"><span class="params">()</span>=&gt;</span> &#123;</div><div class="line">        <span class="keyword">var</span> doc = <span class="keyword">this</span>._d.contentWindow.document</div><div class="line">        doc.addEventListener(<span class="string">"keydown"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span> (e.key == <span class="string">"F11"</span> || e.key == <span class="string">"x"</span>) &#123;</div><div class="line">                <span class="built_in">document</span>.webkitCancelFullScreen()</div><div class="line">                Plaso.hideTop()</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    componentDidMount()&#123;</div><div class="line">        <span class="keyword">var</span> d = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'iframe'</span>)[<span class="number">0</span>]</div><div class="line">        <span class="keyword">this</span>._d=d</div><div class="line">        d.webkitRequestFullScreen()</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">var</span> props=<span class="keyword">this</span>.props</div><div class="line">        <span class="keyword">var</span> path=<span class="string">""</span></div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div id=<span class="string">"iframe"</span> className=&#123;lcns([<span class="string">"border"</span>])&#125;&gt;</div><div class="line">                &lt;div className=&#123;lcns([<span class="string">"exit"</span>])&#125; onClick=&#123;<span class="keyword">this</span>.exitFullScreen&#125;&gt;退出全屏&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">                &lt;iframe className=&#123;lcns(["iframe"])&#125; src=&#123;path&#125; allowFullScreen="true" onLoad=&#123;this.load&#125;/</span>&gt;</div><div class="line">            &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">        );</span></div><div class="line"><span class="regexp">    &#125;</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp">module.exports=ow</span></div></pre></td></tr></table></figure>
<p><strong>有几个注意点</strong><br>1、我这边要全屏的元素是iframe，所以记得加上<code>allowFullScreen=&quot;true&quot;</code><br>2、keydown事件在iframe加载完之后再绑定，写在componentDidMount里面是没有用的，要写在iframe的onload里面<br>3、keydown事件要绑在iframe的document上（contentWindow.document），而不是外层的document</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API" title="Fullscreen_API" target="_blank" rel="external">Fullscreen_API</a></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git：世界上最好的版本控制工具]]></title>
      <url>/2017/08/26/Git%EF%BC%9A%E4%B8%96%E7%95%8C%E4%B8%8A%E6%9C%80%E5%A5%BD%E7%9A%84%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>去年用的是SVN，换了家公司用了git，没有对比就没有伤害，不得不承认git是世界上最好的版本控制工具。本文记下常用的git命令，内容大多参考廖雪峰老师的git教程。加上自己工作中用到的一些命令。这里就不介绍工作区、暂存区、版本库和远程库的概念了。</p>
<h3 id="初始化："><a href="#初始化：" class="headerlink" title="初始化："></a>初始化：</h3><ul>
<li>初始化一个Git仓库，使用git init命令。 添加文件到Git仓库，分两步： <ul>
<li>第一步，使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件； </li>
<li>第二步，使用命令<code>git commit</code>，完成。</li>
</ul>
</li>
<li>要随时掌握工作区的状态，使用<code>git status</code>命令。 </li>
<li>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</li>
</ul>
<h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><ul>
<li>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li>
<li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。<br>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li>
<li>每次修改，如果不add到暂存区，那就不会加入到commit中。<ul>
<li>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</li>
<li>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。</li>
<li>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</li>
</ul>
</li>
<li>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。</li>
</ul>
<h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><ul>
<li>要关联一个远程库，使用命<code>令git remote add origin git@server-name:path/repo-name.git</code>；</li>
<li>关联后，使用命令<code>git push -u origin master第一次推送master分支的所有内容</code>；</li>
<li>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</li>
<li>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。<br>Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</li>
</ul>
<h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><p>Git鼓励大量使用分支：<br>查看分支：<code>git branch</code><br>创建分支：<code>git branch &lt;name&gt;</code><br>切换分支：<code>git checkout &lt;name&gt;</code><br>创建+切换分支：<code>git checkout -b &lt;name&gt;</code><br>合并某分支到当前分支：<code>git merge &lt;name&gt;</code><br>删除分支：<code>git branch -d &lt;name&gt;</code><br>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。<br>用<code>git log --grap</code>h命令可以看到分支合并图。<br>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。</p>
<h3 id="bug分支"><a href="#bug分支" class="headerlink" title="bug分支"></a>bug分支</h3><ul>
<li>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场。</li>
<li>用<code>git stash list</code>命令看看，工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：<br>一是用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除；<br>另一种方式是用<code>git stash pop</code>，恢复的同时把stash内容也删了：</li>
</ul>
<h3 id="feature分支"><a href="#feature分支" class="headerlink" title="feature分支"></a>feature分支</h3><p>开发一个新feature，最好新建一个分支；<br>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</p>
<h3 id="多人合作"><a href="#多人合作" class="headerlink" title="多人合作"></a>多人合作</h3><p>多人协作的工作模式通常是这样：<br>首先，可以试图用<code>git push origin branch-name</code>推送自己的修改，如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并，如果合并有冲突，则解决冲突，并在本地提交，没有冲突或者解决掉冲突后，再用<code>git push origin branch-name</code>推送就能成功！<br>如果<code>git pull</code>提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream branch-name origin/branch-name</code>。这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p><code>git tag &lt;name&gt;</code>：用于新建一个标签，默认为HEAD，也可以指定一个commit id；<br><code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>：可以指定标签信息；<br><code>git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;</code>：可以用PGP签名标签；<br><code>git tag</code>：可以查看所有标签。<br><code>git push origin &lt;tagname&gt;</code>：可以推送一个本地标签；<br><code>git push origin --tags</code>：可以推送全部未推送过的本地标签；<br><code>git tag -d &lt;tagname&gt;</code>：可以删除一个本地标签；<br><code>git push origin :refs/tags/&lt;tagname&gt;</code>：可以删除一个远程标签。</p>
<h3 id="贴一份常用命令的别名"><a href="#贴一份常用命令的别名" class="headerlink" title="贴一份常用命令的别名"></a>贴一份常用命令的别名</h3><p><img src="https://raw.githubusercontent.com/sleepyyj/learngit/master/images/gitalias.png" alt="git alias" title="git alias"></p>
<h3 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h3><ul>
<li>项目中可能会用到一些通用的模块，可以提取出来作为一个单独的project被多个项目公用。使用<code>git submodule add</code>将一个外部项目添加为子模块。如果想从远程库拉一个带子模块的项目，clone之后会发现子模块的目录是空的。这时候先运行<code>git submodule init</code>初始化本地的配置文件，<code>git submodule update</code>拉取子模块的数据到本地。</li>
<li>需要注意的是，每次在子模块中add、commmit、push后回到上层模块，<code>git status</code>看一下会发现子模块有new commits，这时要在层模块再来一套add、commit、push，否则多人协作时，他人无法知道你修改了子模块。同理，其他人需要同步你提交的代码，在pull完之后运行<code>git submodule update</code>即可。</li>
<li>特别注意：如果没有在子模块中push，而在上层模块push的话，在上层模块<code>git status</code>显示的是 modify content而不是new commits。这种情况下，其他人<code>git submodule update</code>的时候会报错，提示找不到那个子模块的commit id，那是肯定的，因为你并没有在子模块中push。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/sleepyyj/learngit/master/images/nocommitid.png" alt="no commit id" title="no commit id"></p>
<h3 id="git-merge和git-rebase的区别"><a href="#git-merge和git-rebase的区别" class="headerlink" title="git merge和git rebase的区别"></a>git merge和git rebase的区别</h3><p>这篇文章总结的不错，懒得写了。。。我们公司一般用rebase，rebase让树看起来比较干净。<br><a href="http://blog.csdn.net/wh_19910525/article/details/7554489" target="_blank" rel="external">http://blog.csdn.net/wh_19910525/article/details/7554489</a></p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
